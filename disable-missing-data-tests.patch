--- tinycss2-1.1.0/tests/test_tinycss2.py~	2020-10-08 09:28:34.000000000 +0200
+++ tinycss2-1.1.0/tests/test_tinycss2.py	2021-09-05 23:24:47.645579634 +0200
@@ -80,99 +80,9 @@
     return list(zip(json_data[::2], json_data[1::2]))
 
 
-def json_test(filename=None):
-    def decorator(function):
-        filename_ = filename or function.__name__.split('_', 1)[-1] + '.json'
-
-        @pytest.mark.parametrize(('css', 'expected'), load_json(filename_))
-        def test(css, expected):
-            value = to_json(function(css))
-            if value != expected:  # pragma: no cover
-                pprint.pprint(value)
-                assert value == expected
-        return test
-    return decorator
-
-
 SKIP = dict(skip_comments=True, skip_whitespace=True)
 
 
-@json_test()
-def test_component_value_list(input):
-    return parse_component_value_list(input, skip_comments=True)
-
-
-@json_test()
-def test_one_component_value(input):
-    return parse_one_component_value(input, skip_comments=True)
-
-
-@json_test()
-def test_declaration_list(input):
-    return parse_declaration_list(input, **SKIP)
-
-
-@json_test()
-def test_one_declaration(input):
-    return parse_one_declaration(input, skip_comments=True)
-
-
-@json_test()
-def test_stylesheet(input):
-    return parse_stylesheet(input, **SKIP)
-
-
-@json_test()
-def test_rule_list(input):
-    return parse_rule_list(input, **SKIP)
-
-
-@json_test()
-def test_one_rule(input):
-    return parse_one_rule(input, skip_comments=True)
-
-
-@json_test()
-def test_color3(input):
-    return parse_color(input)
-
-
-@json_test(filename='An+B.json')
-def test_nth(input):
-    return parse_nth(input)
-
-
-# Do not use @pytest.mark.parametrize because it is slow with that many values.
-def test_color3_hsl():
-    for css, expected in load_json('color3_hsl.json'):
-        assert to_json(parse_color(css)) == expected
-
-
-def test_color3_keywords():
-    for css, expected in load_json('color3_keywords.json'):
-        result = parse_color(css)
-        if result is not None:
-            r, g, b, a = result
-            result = [r * 255, g * 255, b * 255, a]
-        assert result == expected
-
-
-@json_test()
-def test_stylesheet_bytes(kwargs):
-    kwargs['css_bytes'] = kwargs['css_bytes'].encode('latin1')
-    kwargs.pop('comment', None)
-    if kwargs.get('environment_encoding'):
-        kwargs['environment_encoding'] = lookup(kwargs['environment_encoding'])
-    kwargs.update(SKIP)
-    return parse_stylesheet_bytes(**kwargs)
-
-
-@json_test(filename='component_value_list.json')
-def test_serialization(css):
-    parsed = parse_component_value_list(css, skip_comments=True)
-    return parse_component_value_list(serialize(parsed), skip_comments=True)
-
-
 def test_skip():
     source = '''
     /* foo */
